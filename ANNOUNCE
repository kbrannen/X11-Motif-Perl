This is the v1.9 release of the X11::Motif module to update it
so it will run with modern versions of Perl and Motif, specifically
Perl 5.26 and Motif 2.3. I hope to have it on CPAN eventually.

Ken Fox is the original author of this module up thru v1.2a8 and
previous releases can be found on Cpan at:
https://metacpan.org/author/KENFOX

The X11::Motif distribution includes X11::Lib, X11::Toolkit,
X11::Xpm, and X11::Xbae.

The original version supported X11::XRT, but I don't have it and
therefore cannot test it. If you need support for that, see the
original version or contact me and perhaps we can work something
out where you are the tester for that part.

The original version and started on X11::Athena, but it was never
done and I have no motivation to add code for that at this time.

Taken together, these modules provide a nearly complete
interface to the standard X libraries.  The modules have both
object oriented and function call style interfaces.  The object
interface is similar to the Tk module.  The function call
interface is strongly modeled after the standard X library
documentation and will be familiar to someone with X Toolkit or
Motif experience.

The modules work well in both stand-alone scripts and when embedded
in a larger C (or C++) Motif application.  Embedded Perl combined
with this module is an ideal way to add scripting capability to an
existing Motif application.

This release is very stable and works well.  Production programs
are being built on top of it. I understand it may not meet the
standards of production because because it is missing complete
documentation, but that should be added soon.

I've included two versions of the classic "hello world" example
at the end of this announcement.  Even if you don't grab the module,
I'd appreciate feedback on whether the examples are understandable.

To build the modules, you will need:

  * Perl version 5.026 or higher (It would probably work with several
    versions lower, but I haven't tested that.)
  * X11R6 or higher (X11R5 might work but it hasn't been tested)
  * Motif 2.x or higher (CDE Motif is reported to work.  Motif 1.x
    would probably work, but has not been tested.  LessTif is also
    reported to work, but with reduced functionality, but since
    "real Motif" is freely available just use that.)
  * An ANSI C compiler, and the usual supporting tools (e.g. make).

I would appreciate being notified of any changes necessary to
support other environments and/or widget sets.

Any questions or comments?  Please send them to me via the GitHub project
at https://github.com/kbrannen/X11-Motif-Perl.

- Kevin (Current Maintainer)

# ----------------------------------------------------------------------

Any questions or comments?  Please send them to <fox@vulpes.com>.

- Ken (Original Author)

# ----------------------------------------------------------------------
# -- Example #1: The object style

use X11::Motif;

my $toplevel = X::Toolkit::initialize("Example");

my $form = give $toplevel -Form;
my $hello = give $form -Label, -text => 'Hello, world!';
my $ok = give $form -Button, -text => 'OK', -command => sub { exit };

arrange $form -fill => 'xy', -bottom => [ $ok, $hello ];

handle $toplevel;

# ----------------------------------------------------------------------
# -- Example #2: The function call style (i.e. "traditional" Motif)

use X11::Motif qw(:Xt :Xm);

my $toplevel = X::Toolkit::initialize("Example");

my $form = XtCreateManagedWidget("form", xmFormWidgetClass, $toplevel);

my $hello = XtCreateManagedWidget("hello", xmLabelWidgetClass, $form,
				    XmNlabelString, "Hello, world!",
				    XmNlabelType, XmSTRING);

my $ok = XtCreateManagedWidget("ok", xmPushButtonWidgetClass, $form,
				    XmNlabelString, "OK",
				    XmNlabelType, XmSTRING);

XtAddCallback($ok, XmNactivateCallback, sub { exit }, 0);

XtSetValues($hello,
		XmNrightAttachment, XmATTACH_FORM,
		XmNleftAttachment, XmATTACH_FORM,
		XmNtopAttachment, XmATTACH_FORM,
		XmNbottomAttachment, XmATTACH_WIDGET,
		XmNbottomWidget, $ok);

XtSetValues($ok,
		XmNrightAttachment, XmATTACH_FORM,
		XmNleftAttachment, XmATTACH_FORM,
		XmNtopAttachment, XmATTACH_NONE,
		XmNbottomAttachment, XmATTACH_FORM);

XtRealizeWidget($toplevel);
XtAppMainLoop(XtWidgetToApplicationContext($toplevel));

# ----------------------------------------------------------------------
# -- Example #3: A hybrid style

use X11::Motif;

my $toplevel = X::Toolkit::initialize("Example");

# create_widget() is an alias for give()

my $form = $toplevel->create_widget("Form");         # -Form would also work
my $hello = $form->create_widget( "Label", -text => 'Hello, world!' );
my $ok = $form->create_widget( "Button", -text => 'OK', -command => sub { exit } );

$form->arrange( -fill => 'xy', -bottom => [ $ok, $hello ] );

$toplevel->handle();

# (eof)
